/* Creating table sample_staff.invoice_partitioned */

CREATE TABLE sample_staff.invoice_partitioned (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `employee_id` int(11) unsigned NOT NULL,
  `department_id` int(11) unsigned DEFAULT NULL,
  `invoiced_date` date NOT NULL,
  `paid_flag` tinyint(4) NOT NULL DEFAULT '0',
  `insert_dt` datetime NOT NULL,
  `insert_user_id` int(11) NOT NULL DEFAULT '-1',
  `insert_process_code` varchar(255) DEFAULT NULL,
  `update_dt` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `update_user_id` int(11) NOT NULL DEFAULT '-1',
  `update_process_code` varchar(255) DEFAULT NULL,
  `deleted_flag` tinyint(4) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`,`invoiced_date`),
  KEY `idx_employee_id` (`employee_id`)
);

/* Copy data from invoice to invoice_partitioned  |  Fill in the department_id Where the user was at the time of invoiced_date */

INSERT INTO sample_staff.invoice_partitioned
  (`id`,
  `employee_id`,
  `department_id`,
  `invoiced_date`,
  `paid_flag`,
  `insert_dt`,
  `insert_user_id`,
  `insert_process_code`L,
  `update_dt` timestampP,
  `update_user_id` int(11),
  `update_process_code`,
  `deleted_flag`
	)

SELECT 
invoice.id,
invoice.employee_id,
department_employee_rel.department_id, /* fetch department_id of the employee */
invoice.invoiced_date,
invoice.paid_flag,
invoice.insert_dt,
invoice.insert_user_id,
invoice.insert_process_code,
invoice.update_dt,
invoice.update_user_id,
invoice.update_process_code,
invoice.deleted_flag
-- department_employee_rel.* /* if you need to fetch all department data for employee */

FROM sample_staff.invoice

INNER JOIN sample_staff.department_employee_rel ON 1=1
	AND department_employee_rel.deleted_flag=0
	AND invoice.employee_id=department_employee_rel.employee_id
	AND department_employee_rel.from_date<=invoice.invoiced_date /* Include the date of move*/
	AND (
    	department_employee_rel.to_date>invoice.invoiced_date 
    	OR department_employee_rel.to_date IS NULL
		)

WHERE 1=1
	AND invoice.deleted_flag=0
	AND invoice.employee_id=10100 /* test filter on employee */

LIMIT 10 /* limit filter */;


/* Add new LIST partitioning to table invoice based on the department_code (see data in sample_staff.department.code). */